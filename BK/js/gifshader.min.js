!function (n) { function t(r) { if (i[r]) return i[r].exports; var u = i[r] = { exports: {}, id: r, loaded: !1 }; return n[r].call(u.exports, u, u.exports, t), u.loaded = !0, u.exports } var i = {}; t.m = n; t.c = i; t.p = ""; t(0) }([function (n, t, i) { "use strict"; function o(n, t) { return { status: "error", src: t, message: n, timestamp: Date.now() } } var s = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (n) { return typeof n } : function (n) { return n && "function" == typeof Symbol && n.constructor === Symbol ? "symbol" : typeof n }, h = i(1), e, f; if ("undefined" == typeof AFRAME) throw "Component attempted to register before AFRAME was available."; e = AFRAME.utils.srcLoader.parseUrl; f = AFRAME.utils.debug; f.enable("shader:gif:warn"); var c = f("shader:gif:warn"), r = f("shader:gif:debug"), u = {}; AFRAME.registerShader("gif", { schema: { color: { type: "color" }, fog: { "default": !0 }, metalness: { "default": 0 }, roughness: { "default": .5 }, src: { "default": null }, autoplay: { "default": !0 } }, init: function (n) { return r("init", n), r(this.el.components), this.__cnv = document.createElement("canvas"), this.__cnv.width = 2, this.__cnv.height = 2, this.__ctx = this.__cnv.getContext("2d"), this.__texture = new THREE.Texture(this.__cnv), this.__material = {}, this.__reset(), this.material = new THREE.MeshStandardMaterial({ map: this.__texture }), this.el.sceneEl.addBehavior(this), this.__addPublicFunctions(), this.__drawedIndex = 0, this.material }, update: function (n) { return r("update", n), this.__updateMaterial(n), this.__updateTexture(n), this.material }, tick: function () { this.__frames && !this.paused() && Date.now() - this.__startTime >= this.__nextFrameTime && this.nextFrame() }, __updateMaterial: function (n) { var i = this.material, t = this.__getMaterialData(n); Object.keys(t).forEach(function (n) { i[n] = t[n] }) }, __getMaterialData: function (n) { return { fog: n.fog, color: new THREE.Color(n.color), metalness: n.metalness, roughness: n.roughness } }, __setTexure: function (n) { r("__setTexure", n); "error" === n.status ? (c("Error: " + n.message + "\nsrc: " + n.src), this.__reset()) : "success" === n.status && n.src !== this.__textureSrc && (this.__reset(), this.__ready(n)) }, __updateTexture: function (n) { var i = n.src, t = n.autoplay; "boolean" == typeof t ? this.__autoplay = t : void 0 === t && (this.__autoplay = !0); this.__autoplay && this.__frames && this.play(); i ? this.__validateSrc(i, this.__setTexure.bind(this)) : this.__reset() }, __validateSrc: function (n, t) { var l = e(n), r, i, f, h, c; if (l) this.__getImageSrc(l, t); else if (r = void 0, i = this.__validateAndGetQuerySelector(n), i && "object" === (void 0 === i ? "undefined" : s(i))) { if (i.error) r = i.error; else if (f = i.tagName.toLowerCase(), "video" === f) n = i.src, r = "For video, please use `aframe-video-shader`"; else { if ("img" === f) return void this.__getImageSrc(i.src, t); r = "For <" + f + "> element, please use `aframe-html-shader`" } r && (h = u[n], c = o(r, n), h && h.callbacks ? h.callbacks.forEach(function (n) { return n(c) }) : t(c), u[n] = c) } }, __getImageSrc: function (n, t) { function f(t) { var r = o(t, n); i.callbacks && (i.callbacks.forEach(function (n) { return n(r) }), u[n] = r) } var e = this, i, r; if (n !== this.__textureSrc) { if (i = u[n], i && i.callbacks) { if (i.src) return void t(i); if (i.callbacks) return void i.callbacks.push(t) } else (i = u[n] = { callbacks: [] }).callbacks.push(t); r = new Image; r.crossOrigin = "Anonymous"; r.addEventListener("load", function () { e.__getUnit8Array(n, function (t) { t ? h.parseGIF(t, function (t, r, f, e) { var o = { status: "success", src: n, times: t, cnt: r, frames: f, disposalMethods: e, timestamp: Date.now() }; i.callbacks && (i.callbacks.forEach(function (n) { return n(o) }), u[n] = o) }, function (n) { return f(n) }) : f("This is not gif. Please use `shader:flat` instead") }) }); r.addEventListener("error", function () { return f("Could be the following issue\n - Not Image\n - Not Found\n - Server Error\n - Cross-Origin Issue") }); r.src = n } }, __getUnit8Array: function (n, t) { if ("function" == typeof t) { var i = new XMLHttpRequest; i.open("GET", n); i.responseType = "arraybuffer"; i.addEventListener("load", function (n) { for (var r = new Uint8Array(n.target.response), u = r.subarray(0, 4), f = "", i = 0; i < u.length; i++) f += u[i].toString(16); "47494638" === f ? t(r) : t() }); i.addEventListener("error", function (n) { r(n); t() }); i.send() } }, __validateAndGetQuerySelector: function (n) { try { var t = document.querySelector(n); return t || { error: "No element was found matching the selector" } } catch (n) { return { error: "no valid selector" } } }, __addPublicFunctions: function () { this.el.gif = { play: this.play.bind(this), pause: this.pause.bind(this), togglePlayback: this.togglePlayback.bind(this), paused: this.paused.bind(this), nextFrame: this.nextFrame.bind(this) } }, pause: function () { r("pause"); this.__paused = !0 }, play: function () { r("play"); this.__paused = !1 }, togglePlayback: function () { this.paused() ? this.play() : this.pause() }, paused: function () { return this.__paused }, nextFrame: function () { for (this.__draw() ; Date.now() - this.__startTime >= this.__nextFrameTime;) this.__nextFrameTime += this.__delayTimes[this.__frameIdx++], (this.__infinity || this.__loopCnt) && this.__frameCnt <= this.__frameIdx && (this.__frameIdx = 0) }, __clearCanvas: function () { this.__ctx.clearRect(0, 0, this.__width, this.__height); this.__texture.needsUpdate = !0 }, __draw: function () { var t = this.__frameIdx ? this.__frameIdx - 1 : 0, n; if (2 === this.__disposalMethods[t]) this.__clearCanvas(); else if (3 === this.__disposalMethods[t] && 1 < this.__frameIdx) this.__clearCanvas(), this.__ctx.drawImage(this.__frames[this.__frameIdx - 2], 0, 0, this.__width, this.__height); else if (1 === this.__disposalMethods[t] && 0 < t - this.__drawedIndex) for (n = this.__drawedIndex + 1; n <= t; n = n + 1 | 0) this.__ctx.drawImage(this.__frames[n], 0, 0, this.__width, this.__height), 2 === this.__disposalMethods[n] && this.__clearCanvas(); this.__ctx.drawImage(this.__frames[this.__frameIdx], 0, 0, this.__width, this.__height); this.__texture.needsUpdate = !0; this.__drawedIndex = this.__frameIdx }, __ready: function (n) { var f = n.src, i = n.times, u = n.cnt, t = n.frames, e = n.disposalMethods; r("__ready"); this.__textureSrc = f; this.__delayTimes = i; u ? this.__loopCnt = u : this.__infinity = !0; this.__frames = t; this.__frameCnt = i.length; this.__disposalMethods = e; this.__startTime = Date.now(); this.__width = THREE.Math.floorPowerOfTwo(t[0].width); this.__height = THREE.Math.floorPowerOfTwo(t[0].height); this.__cnv.width = this.__width; this.__cnv.height = this.__height; this.__draw(); this.__autoplay && 1 < this.__frames.length ? this.play() : this.pause() }, __reset: function () { this.pause(); this.__clearCanvas(); this.__startTime = 0; this.__nextFrameTime = 0; this.__frameIdx = 0; this.__frameCnt = 0; this.__delayTimes = null; this.__infinity = !1; this.__loopCnt = 0; this.__frames = null; this.__disposalMethods = null; this.__textureSrc = null } }) }, function (n, t) { "use strict"; t.parseGIF = function (n, t, i) { var r = 0, l = [], f = 0, s = null, a = null, u = [], v = [], y = 0, p, h, c, e, o, w; if (71 !== n[0] || 73 !== n[1] || 70 !== n[2] || 56 !== n[3] || 57 !== n[4] && 55 !== n[4] || 97 !== n[5]) i && i("parseGIF: no GIF89a"); else for (r += +!!(128 & n[10]) * Math.pow(2, 1 + (7 & n[10])) * 3 + 13, p = n.subarray(0, r) ; n[r] && 59 !== n[r];) { if (h = r, c = n[r], 33 === c) { if (e = n[++r], -1 === [1, 254, 249, 255].indexOf(e)) { i && i("parseGIF: unknown label"); break } for (249 === e && l.push(10 * (n[r + 3] + (n[r + 4] << 8))), 255 === e && (y = n[r + 15] + (n[r + 16] << 8)) ; n[++r];) r += n[r]; 249 === e && (s = n.subarray(h, r + 1), v.push(s[3] >> 2 & 7)) } else { if (44 !== c) { i && i("parseGIF: unknown blockId"); break } for (r += 9, r += +!!(128 & n[r]) * 3 * Math.pow(2, 1 + (7 & n[r])) + 1; n[++r];) r += n[r]; a = n.subarray(h, r + 1); u.push(URL.createObjectURL(new Blob([p, s, a]))) } r++ } u.length && (o = document.createElement("canvas"), w = function r() { var n = new Image; n.onload = function (n, i) { f++; u[i] = this; f === u.length ? (o = null, t && t(l, y, u, v)) : r(++i) }.bind(n); n.src = o.toDataURL("image/gif") }, u.forEach(function (n, t) { var i = new Image; i.onload = function (n, t) { 0 === t && (o.width = i.width, o.height = i.height); f++; u[t] = this; f === u.length && (f = 0, w(1)) }.bind(i, null, t); i.src = n })) } }])
