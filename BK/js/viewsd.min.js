var webArViewer = webArViewer || {}; (function (c) { webArViewer.scene = document.querySelector("a-scene"); var b = { C: { arNum: 5 }, init: function () { this.setArg(); if (this.setArData()) { this.setWrap(); this.createModel(); var d = { Touch: typeof document.ontouchstart !== "undefined", Pointer: window.navigator.pointerEnabled, MSPointer: window.navigator.msPointerEnabled }; this.eventNames = { start: d.Pointer ? "pointerdown" : d.MSPointer ? "MSPointerDown" : d.Touch ? "touchstart" : "mousedown", move: d.Pointer ? "pointermove" : d.MSPointer ? "MSPointerMove" : d.Touch ? "touchmove" : "mousemove", end: d.Pointer ? "pointerup" : d.MSPointer ? "MSPointerUp" : d.Touch ? "touchend" : "mouseup" }; this.setScene(); this.setTapEvents() } this.setSwitcher() }, setArg: function () { var e = this; var d = {}; var j = location.search.substring(1).split("&"); for (var f = 0; j[f]; f++) { var g = j[f].split("="); d[g[0]] = decodeURIComponent(g[1]) } var h = new Array(e.C.arNum).join("0"); d.warpList = d.xw && (h + parseInt(d.xw, 16).toString(2)).slice(-1 * e.C.arNum).split("").reverse(); d.shodowList = d.xs && (h + parseInt(d.xs, 16).toString(2)).slice(-1 * e.C.arNum).split("").reverse(); d.QuartList = d.xq && (h + parseInt(d.xq, 16).toString(2)).slice(-1 * e.C.arNum).split("").reverse(); d.ReflectList = d.xr && (h + parseInt(d.xr, 16).toString(2)).slice(-1 * e.C.arNum).split("").reverse(); d.turnList = d.xt && (h + parseInt(d.xt, 16).toString(2)).slice(-1 * e.C.arNum).split("").reverse(); d.ElasticList = d.xe && (h + parseInt(d.xe, 16).toString(2)).slice(-1 * e.C.arNum).split("").reverse(); d.decaList = d.xd && (h + parseInt(d.xd, 16).toString(2)).slice(-1 * e.C.arNum).split("").reverse(); d.sizeList = d.wh && (h + h + parseInt(d.wh, 16).toString(10)).slice(-2 * e.C.arNum).match(/.{2}/g).reverse(); d.markerList = d.mk; e.arg = d }, setArData: function () { var m = this; var j = document.createElement("a-assets"); j.setAttribute("timeout", "9000"); var k = new Array(m.C.arNum); var g = true; var h = 0; for (var l = 0; l < m.C.arNum; l = (l + 1) | 0) { var e = { path: m.arg["p" + l] }; e.map = m.arg["m" + l]; e.tap = m.arg["t" + l]; e.isWarp = m.arg.warpList && !!Number(m.arg.warpList[l]); e.isShadow = m.arg.shodowList && !!Number(m.arg.shodowList[l]); e.isQuart = m.arg.QuartList && !!Number(m.arg.QuartList[l]); e.isReflect = m.arg.ReflectList && !!Number(m.arg.ReflectList[l]); e.isTurn = m.arg.turnList && !!Number(m.arg.turnList[l]); e.isElastic = m.arg.ElasticList && !!Number(m.arg.ElasticList[l]); e.isMarker = !!m.arg.markerList; e.isDeca = m.arg.decaList && !!Number(m.arg.decaList[l]); e.size = m.arg.sizeList ? { w: Number(m.arg.sizeList[l][0]), h: Number(m.arg.sizeList[l][1]) } : { w: 2, h: 2 }; if (e.isDeca) { e.size = { w: e.size.w * 10, h: e.size.h * 10 } } e.isGif = !!(m.arg["p" + l] || "").match(/\.gif$/i); e.hasMp4 = !!(m.arg["t" + l] || "").match(/\.mp4$/i); if (e.path) { var d = document.createElement("img"); d.setAttribute("crossorigin", "anonymous"); d.setAttribute("id", "source" + l); d.setAttribute("src", e.path); j.appendChild(d); if (e.map) { var f = document.createElement("img"); f.setAttribute("crossorigin", "anonymous"); f.setAttribute("id", "map" + l); f.setAttribute("src", e.map); j.appendChild(f) } if (e.tap) { m.tap = true; if (e.hasMp4) { var i = document.createElement("video"); i.setAttribute("webkit-playsinline", "true"); i.setAttribute("playsinline", "true"); e.tapEl = i; e.keyColor = m.arg["kc" + l] ? decodeURI(m.arg["kc" + l]) : "0.1 0.9 0.2" } else { var i = document.createElement("img") } i.setAttribute("crossorigin", "anonymous"); i.setAttribute("id", "tap" + l); i.setAttribute("src", e.tap); j.appendChild(i) } } k[l] = e } if (!k.some(function (o) { var n = o.path; return n })) { if (window.confirm("画像情報が取得できませんでした。")) { location.href = "http://www.aoshima-bk.co.jp/" } return false } webArViewer.scene.appendChild(j); m.arData = k; return true }, setSwitcher: function () { var f = this; var h = document.getElementById("swMarker"); var g = document.getElementById("swPreview"); var e = document.getElementById("swInfo"); var d = document.getElementById("infoContent"); e.addEventListener("click", function () { d.classList.toggle("show"); e.classList.toggle("current") }); if (!f.arData || location.pathname.match(/vr/)) { return false } if (f.arg.preview) { g.classList.add("current") } else { h.classList.add("current") } h.addEventListener("click", function () { if (!this.classList.contains("current")) { location.replace(location.search.replace("&preview=1", "")) } }); g.addEventListener("click", function () { if (!this.classList.contains("current")) { location.replace(location.search + "&preview=1") } }) }, setWrap: function () { var d = this; var e = d.arg.offsetPos ? decodeURI(d.arg.offsetPos) : "0 0 0"; d.wrap = document.createElement("a-entity"); d.wrap.setAttribute("position", e) }, createModel: function () { var n = this; for (var k = 0; k < n.C.arNum; k = (k + 1) | 0) { var d = n.arData[k]; if (!d.path) { continue } if (k === 4) { var h = document.createElement("a-sky"); AFRAME.utils.entity.setComponentProperty(h, "material", { shader: d.isGif ? "gif" : "standard", src: "#source" + k, radius: d.isWarp ? 80 : 5000 }); if (d.isShadow) { AFRAME.utils.entity.setComponentProperty(h, "animation__rot", { property: "geometry.phiStart", dur: 20000, easing: "linear", loop: true, to: -360 }) } webArViewer.scene.appendChild(h); if (d.isQuart) { var f = document.createElement("a-entity"); var e = document.createElement("a-entity"); f.setAttribute("light", "type: hemisphere; color: #33F; groundColor: #BB3; intensity: 2"); e.setAttribute("light", "type: directional; color: #FF3; intensity: 0.6"); e.setAttribute("position", "-20 90 10"); webArViewer.scene.appendChild(f); webArViewer.scene.appendChild(e) } continue } if (k && d.isShadow) { var l = document.createElement("a-entity"); l.setAttribute("position", AFRAME.utils.coordinates.stringify(n.positionVec3(k, "shadow"))); l.setAttribute("rotation", "-90 0 0"); AFRAME.utils.entity.setComponentProperty(l, "geometry", { primitive: "plane", height: d.size.h, width: d.size.w }); AFRAME.utils.entity.setComponentProperty(l, "material", { shader: d.isGif ? "gif" : "flat", npot: true, src: "#source" + k, transparent: true, alphaTest: 0.1, color: "black", opacity: 0.3, depthTest: false }); if (d.isQuart) { AFRAME.utils.entity.setComponentProperty(l, "animation__alpha", { property: "material.opacity", dir: "alternate", dur: 400, easing: "easeInOutQuart", loop: true, to: "0.1" }); AFRAME.utils.entity.setComponentProperty(l, "animation__scale", { property: "scale", dir: "alternate", dur: 400, easing: "easeInOutQuart", loop: true, to: "0.8 0.7 1" }) } if (d.isTurn) { AFRAME.utils.entity.setComponentProperty(l, "animation__turn", { property: "scale", dir: "alternate", dur: 100, loop: 4, from: "1 1 1", to: "0.1 1 1", startEvents: "turn" }) } if (d.isElastic) { AFRAME.utils.entity.setComponentProperty(l, "animation__guni", { property: "scale", dur: 600, easing: "easeOutBack", to: "1.3 0.95 1", startEvents: "guni" }); AFRAME.utils.entity.setComponentProperty(l, "animation__guniback", { property: "scale", dur: 1000, easing: "easeOutElastic", elasticity: 600, from: "1.35 0.9 1", to: "1 1 1", startEvents: "guniback" }) } n.arData[k].shadow = l } var g = document.createElement("a-entity"); var i = n.positionVec3(k, "main"); g.setAttribute("position", AFRAME.utils.coordinates.stringify(i)); if (!d.isGif) { g.setAttribute("rotation", ((k === 0 && !d.isWarp) ? -90 : 0) + " 0 0") } else { g.setAttribute("rotation", ((k === 0 && !d.isWarp) ? -90 : (n.arg.preview) ? 0 : -30) + " 0 0") } AFRAME.utils.entity.setComponentProperty(g, "material", { shader: d.isGif ? "gif" : "standard", npot: true, src: "#source" + k, displacementMap: d.map ? "#map" + k : null, displacementBias: -0.5, side: "double", transparent: true, alphaTest: 0.1, metalness: d.isReflect ? 0.1 : 0, roughness: d.isReflect ? 0.3 : 0.5 }); if (!d.isWarp) { AFRAME.utils.entity.setComponentProperty(g, "geometry", { primitive: "plane", height: d.size.h, width: d.size.w, segmentsHeight: d.map ? 180 : 1, segmentsWidth: d.map ? 180 : 1 }) } else { if (k) { var j, m; if (k === 1 && !n.arg.multi) { j = 212; m = -64 } else { j = -32; m = 64 } AFRAME.utils.entity.setComponentProperty(g, "geometry", { primitive: "cylinder", openEnded: true, thetaStart: j, thetaLength: m, height: d.size.h, radius: d.size.w, segmentsHeight: d.map ? 180 : 18, segmentsRadial: d.map ? 360 : 36 }) } else { AFRAME.utils.entity.setComponentProperty(g, "geometry", { primitive: "sphere", radius: d.size.w / 2, phiStart: -90, segmentsHeight: d.map ? 180 : 18, segmentsWidth: d.map ? 360 : 36 }) } } if (d.isQuart) { AFRAME.utils.entity.setComponentProperty(g, "animation__pos", { property: "position", dir: "alternate", dur: 400, easing: "easeInOutQuart", loop: true, to: i.x + " " + (i.y + d.size.h / 3) + " " + i.z }); AFRAME.utils.entity.setComponentProperty(g, "animation__scale", { property: "scale", dir: "alternate", dur: 400, easing: "easeOutQuad", loop: true, to: "0.94 1.06 1" }) } if (k === 0 && d.isShadow) { AFRAME.utils.entity.setComponentProperty(g, "animation__rot", { property: "rotation", dur: 20000, easing: "linear", loop: true, to: (d.isWarp ? 0 : -90) + " 360 0" }) } if (d.isTurn) { AFRAME.utils.entity.setComponentProperty(g, "animation__turn", { property: "rotation", dur: 3000, easing: "easeOutElastic", elasticity: 300, from: "0 0 0", to: "0 360 0", startEvents: "turn" }) } if (d.isElastic) { AFRAME.utils.entity.setComponentProperty(g, "animation__guni", { property: "scale", dur: 600, easing: "easeOutBack", to: "1.3 0.95 1", startEvents: "guni" }); AFRAME.utils.entity.setComponentProperty(g, "animation__guniback", { property: "scale", dur: 1000, easing: "easeOutElastic", elasticity: 600, from: "1.35 0.9 1", to: "1 1 1", startEvents: "guniback" }) } n.arData[k].main = g } }, setScene: function () { var k = this; if (k.arg.multi) { if (k.arg.preview) { for (var h = 0; h < k.C.arNum; h = (h + 1) | 0) { if (!k.arData[h].path || h === 4) { continue } var e = document.createElement("a-entity"); e.setAttribute("position", ["0 0 0", "2 0 -2.1", "0 0 -2.3", "-2 0 -2.2"][h]); k.arData[h].shadow && e.appendChild(k.arData[h].shadow); k.arData[h].main && e.appendChild(k.arData[h].main); k.wrap.appendChild(e) } } else { for (var h = 0; h < k.C.arNum; h = (h + 1) | 0) { if (!k.arData[h].path || h === 4) { continue } var j = document.createElement("a-marker"); j.setAttribute("preset", "custom"); j.setAttribute("type", "pattern"); if (!!k.arData[h].mk) { j.setAttribute("url", "asset/pattern-" + k.arData[h].mk + ".patt") } else { j.setAttribute("url", "asset/pattern-" + h + ".patt") } k.arData[h].shadow && j.appendChild(k.arData[h].shadow); k.arData[h].main && j.appendChild(k.arData[h].main); webArViewer.scene.appendChild(j) } return } } else { k.arData[0].main && !k.arData[0].isWarp && k.wrap.appendChild(k.arData[0].main); k.arData[1].shadow && k.wrap.appendChild(k.arData[1].shadow); k.arData[2].shadow && k.wrap.appendChild(k.arData[2].shadow); k.arData[3].shadow && k.wrap.appendChild(k.arData[3].shadow); k.arData[1].main && k.wrap.appendChild(k.arData[1].main); k.arData[2].main && k.wrap.appendChild(k.arData[2].main); k.arData[0].main && k.arData[0].isWarp && k.wrap.appendChild(k.arData[0].main); k.arData[3].main && k.wrap.appendChild(k.arData[3].main) } if (location.pathname.match(/vr/)) { var g = k.arg.vrPos ? decodeURI(k.arg.vrPos) : "0 0 -4"; k.wrap.setAttribute("position", g) } else { if (k.arg.preview) { var f = k.wrap.getAttribute("position"); f.y -= 2; f.z -= 8; k.wrap.setAttribute("position", AFRAME.utils.coordinates.stringify(f)); k.wrap.setAttribute("rotation", "10 0 0"); var d; var i = 1; webArViewer.scene.addEventListener(k.eventNames.start, function (n) { var m = n.changedTouches ? n.changedTouches[0] : n; d = m.pageY }); webArViewer.scene.addEventListener(k.eventNames.move, function (n) { var m = n.changedTouches ? n.changedTouches[0] : n; if (d) { i += (m.pageY - d) / webArViewer.scene.clientHeight / 5; AFRAME.utils.entity.setComponentProperty(k.wrap, "animation__scale", { property: "scale", dur: 5, easing: "linear", loop: false, to: i + " " + i + " " + i }) } }); webArViewer.scene.addEventListener(k.eventNames.end, function (m) { d = null }) } else { if (!k.arg.multi) { var l = document.createElement("a-marker"); l.setAttribute("preset", "custom"); l.setAttribute("type", "pattern"); if (!!k.arg.mk) { l.setAttribute("url", "asset/pattern-" + k.arg.mk + ".patt") } else { l.setAttribute("url", "asset/pattern-0.patt") } l.appendChild(k.wrap); webArViewer.scene.appendChild(l); return } } } webArViewer.scene.appendChild(k.wrap) }, positionVec3: function (d, h) { var e = this; var g = e.arData[d].size.h / 2; var f = e.arData[d].size.w; var j = e.arData[d].isWarp; if (h === "shadow") { if (e.arg.multi) { return { x: 0, y: 0, z: -g } } else { var i = {}; i[1] = function () { return { x: 0, y: 0, z: -e.arData[0].size.h / 2 - g - (j ? 0.2 : 0) } }; i[2] = function () { return { x: 0, y: 0, z: -g + (j ? 0.2 : 0) } }; i[3] = function () { return { x: 0, y: 0, z: e.arData[0].size.h / 2 - g + (j ? 0.2 : 0) } }; return i[d]() } } else { if (d === 0) { return { x: 0, y: j ? f / 2 : 0, z: 0 } } else { if (e.arg.multi) { return { x: 0, y: g, z: -(j ? f : 0) } } else { var i = {}; i[1] = function () { return { x: 0, y: g, z: (j ? f - 0.2 : 0) - e.arData[0].size.h / 2 } }; i[2] = function () { return { x: 0, y: g, z: -(j ? f - 0.2 : 0) } }; i[3] = function () { return { x: 0, y: g, z: -(j ? f - 0.2 : 0) + e.arData[0].size.h / 2 } }; return i[d]() } } } }, setTapEvents: function () { var f = this; if (!f.arg.xt && !f.arg.xe && !f.tap) { return } else { var e = document.getElementById("touch"); var g = new Image(54, 40); g.src = "asset/touch.png"; g.onload = function () { e.appendChild(g); e.classList.add("attention") } } if (f.arg.xt) { webArViewer.scene.addEventListener("click", function (j) { for (var i = 0; i < f.C.arNum; i = (i + 1) | 0) { if (f.arData[i].path && f.arData[i].isTurn) { f.arData[i].main.emit("turn"); f.arData[i].isShadow && f.arData[i].shadow.emit("turn") } } }) } if (f.arg.xe) { webArViewer.scene.addEventListener(f.eventNames.start, function (j) { for (var i = 0; i < f.C.arNum; i = (i + 1) | 0) { if (f.arData[i].path && f.arData[i].isElastic) { f.arData[i].main.emit("guni"); f.arData[i].isShadow && f.arData[i].shadow.emit("guni") } } }); webArViewer.scene.addEventListener(f.eventNames.end, function (j) { for (var i = 0; i < f.C.arNum; i = (i + 1) | 0) { if (f.arData[i].path && f.arData[i].isElastic) { f.arData[i].main.emit("guniback"); f.arData[i].isShadow && f.arData[i].shadow.emit("guniback") } } }) } if (f.tap) { for (var d = 0; d < f.C.arNum; d = (d + 1) | 0) { var h = f.arData[d]; if (!h.tap) { continue } h.mainTap = document.createElement("a-plane"); AFRAME.utils.entity.setComponentProperty(h.mainTap, "material", { shader: h.hasMp4 ? "chromakey" : h.tap.match(/\.gif$/i) ? "gif" : "standard", npot: true, src: "#tap" + d, displacementMap: h.map ? "#map" + d : null, displacementBias: -0.5, side: "double", transparent: true, alphaTest: 0.1, metalness: h.isReflect ? 0.1 : 0, roughness: h.isReflect ? 0.3 : 0.5, keyColor: h.hasMp4 ? h.keyColor : null }); h.mainTap.setAttribute("visible", false); webArViewer.scene.appendChild(h.mainTap); if (h.isShadow) { h.shadowTap = document.createElement("a-plane"); AFRAME.utils.entity.setComponentProperty(h.shadowTap, "material", { shader: h.hasMp4 ? "chromakey" : h.tap.match(/\.gif$/i) ? "gif" : "flat", npot: true, src: "#tap" + d, transparent: true, alphaTest: 0.1, color: "black", opacity: 0.3, depthTest: false, keyColor: h.hasMp4 ? h.keyColor : null }); h.shadowTap.setAttribute("visible", false); webArViewer.scene.appendChild(h.shadowTap) } } webArViewer.scene.addEventListener("click", function (j) { for (var i = 0; i < f.C.arNum; i = (i + 1) | 0) { var k = f.arData[i]; if (!k.tap) { continue } if (k.tapVisible) { k.tapVisible = false; k.main.object3DMap.mesh.material = k.mainDefaultMaterial; k.isShadow && (k.shadow.object3DMap.mesh.material = k.shadowDefaultMaterial); if (k.hasMp4) { k.tapEl.pause() } } else { k.tapVisible = true; if (!k.mainDefaultMaterial) { k.mainDefaultMaterial = k.main.object3DMap.mesh.material; k.mainTapMaterial = k.mainTap.object3DMap.mesh.material; if (k.isShadow) { k.shadowDefaultMaterial = k.shadow.object3DMap.mesh.material; k.shadowTapMaterial = k.shadowTap.object3DMap.mesh.material } } k.main.object3DMap.mesh.material = k.mainTapMaterial; k.isShadow && (k.shadow.object3DMap.mesh.material = k.shadowTapMaterial); if (k.hasMp4) { k.tapEl.currentTime = 0; k.tapEl.play() } } } }, true) } } }; var a = { cEle: null, videoDom: null, rLensTimer: null, init: function () { this.cEle = document.getElementById("rightlens"); if (this.cEle) { this.setEvents() } }, setEvents: function () { var d = this; webArViewer.scene.addEventListener("enter-vr", function (h) { var g = d.cEle.getContext("2d"); d.videoDom = document.querySelector("video"); d.videoDom.style.left = "-20%"; d.cEle.style.zIndex = -1; function f() { d.cEle.width = d.videoDom.clientWidth; d.cEle.height = d.videoDom.clientHeight; d.cEle.style.marginTop = d.videoDom.style.marginTop; d.cEle.style.top = d.videoDom.style.top; g.drawImage(d.videoDom, d.videoDom.videoWidth / 10, 0, 9 * d.videoDom.videoWidth / 10, d.videoDom.videoHeight, 0, 0, 9 * d.videoDom.videoWidth / 10, d.videoDom.videoHeight) } d.rLensTimer = setInterval(f, 1000 / 60) }); webArViewer.scene.addEventListener("exit-vr", function (f) { d.videoDom.style.left = "0px"; d.cEle.style.zIndex = -5; clearInterval(d.rLensTimer) }) } }; webArViewer.ar = b; webArViewer.vr = a; webArViewer.ar.init(); webArViewer.vr.init() }());
