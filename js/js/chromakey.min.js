!function (n) { function t(r) { if (i[r]) return i[r].exports; var u = i[r] = { exports: {}, id: r, loaded: !1 }; return n[r].call(u.exports, u, u.exports, t), u.loaded = !0, u.exports } var i = {}; t.m = n; t.c = i; t.p = ""; t(0) }([function () { if ("undefined" == typeof AFRAME) throw new Error("Component attempted to register before AFRAME was available."); AFRAME.registerShader("chromakey", { schema: { src: { type: "map" }, keyColor: { "default": { x: .1, y: .9, z: .2 }, type: "vec3", is: "uniform" }, transparent: { "default": !0, is: "uniform" }, color: { is: "uniform" } }, init: function (n) { var t = new THREE.VideoTexture(n.src); t.minFilter = THREE.LinearFilter; this.material = new THREE.ShaderMaterial({ uniforms: { keyColor: { type: "c", value: n.keyColor }, texture: { type: "t", value: t }, shadow: { type: "i", value: n.color ? 1 : 0 } }, vertexShader: this.vertexShader, fragmentShader: this.fragmentShader }) }, update: function (n) { this.material.color = n.keyColor; this.material.src = n.src; this.material.transparent = n.transparent }, vertexShader: "varying vec2 vUv;\nvoid main(void)\n{\nvUv = uv;\nvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\ngl_Position = projectionMatrix * mvPosition;\n}", fragmentShader: "uniform sampler2D texture;\nuniform vec3 keyColor;\nuniform int shadow;\nvarying vec2 vUv;\nconst vec3 mono = vec3(0,0,0);\nvoid main(void)\n{\nvec3 tColor = texture2D( texture, vUv ).rgb;\nfloat a = (length(tColor - keyColor) - 0.5) * 7.0;\ngl_FragColor = shadow == 1 ? vec4(mono, min(a, 0.3)) : vec4(tColor, a);\n}" }) }])